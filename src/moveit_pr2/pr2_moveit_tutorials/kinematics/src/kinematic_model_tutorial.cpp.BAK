  /*********************************************************************
 * Software License Agreement (BSD License)
 *
 *  Copyright (c) 2012, Willow Garage, Inc.
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions and the following
 *     disclaimer in the documentation and/or other materials provided
 *     with the distribution.
 *   * Neither the name of Willow Garage nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 *  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 *********************************************************************/

/* Author: Sachin Chitta */

#include <ros/ros.h>

// MoveIt!
#include <moveit/robot_model_loader/robot_model_loader.h>
#include <moveit/robot_model/robot_model.h>
#include <moveit/robot_state/robot_state.h>
#include <sensor_msgs/JointState.h>
#include <std_msgs/Float64.h>
#include <unistd.h>

std::vector<double> current_joint_values;//current_joint_values stores the current joint values subscribed from /joint_states topic
void joint_state_handler(const sensor_msgs::JointState::ConstPtr& msg)
{
  current_joint_values.clear();
  for(std::size_t i = 0; i < msg->position.size(); ++i)
    current_joint_values.push_back(msg->position[i]);
}


int main(int argc, char **argv)
{
  for(std::size_t i = 0; i < 7; ++i)
    current_joint_values.push_back(0);

  ros::init (argc, argv, "arm_kinematics");
  ros::AsyncSpinner spinner(1);
  spinner.start();

  // BEGIN_TUTORIAL

  // Start
  // ^^^^^
  robot_model_loader::RobotModelLoader robot_model_loader("robot_description");
  robot_model::RobotModelPtr kinematic_model = robot_model_loader.getModel();
  ROS_INFO("Model frame: %s", kinematic_model->getModelFrame().c_str());

  robot_state::RobotStatePtr kinematic_state(new robot_state::RobotState(kinematic_model));
  kinematic_state->setToDefaultValues();
  const robot_state::JointModelGroup* joint_model_group = kinematic_model->getJointModelGroup("arm");

  const std::vector<std::string> &joint_names = joint_model_group->getJointModelNames();

  // Subscribe Joint_State_Values
  // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  ros::NodeHandle n;
  ros::Subscriber sub = n.subscribe<sensor_msgs::JointState>("/joint_states", 1, joint_state_handler);

/*
  for(;;){
    for(std::size_t i = 0; i < current_joint_values.size(); ++i)
    {
      ROS_INFO("Joint %s: %f", joint_names[i].c_str(), current_joint_values[i]);
    }
    std::cout<<std::endl;
    sleep(1);  
  }
*/

  // Joint Limits
  // ^^^^^^^^^^^^
  // setJointGroupPositions() does not enforce joint limits by itself, but a call to enforceBounds() will do it.
  /* Set one joint in the right arm outside its joint limit */
  kinematic_state->setJointGroupPositions(joint_model_group, current_joint_values);

  /* Check whether any joint is outside its joint limits */
  ROS_INFO_STREAM("Current state is " << (kinematic_state->satisfiesBounds() ? "valid" : "not valid"));

  /* Enforce the joint limits for this state and check again*/
  kinematic_state->enforceBounds();
  ROS_INFO_STREAM("Current state is " << (kinematic_state->satisfiesBounds() ? "valid" : "not valid"));


  //Publish Joint State Values
  //^^^^^^^^^^^^^^^^^^^^^^^^^^
  ros::Publisher pub_1 = n.advertise<std_msgs::Float64>("/finalasm_position_controller_1/command", 1, true);
  ros::Publisher pub_2 = n.advertise<std_msgs::Float64>("/finalasm_position_controller_2/command", 1, true);
  ros::Publisher pub_3 = n.advertise<std_msgs::Float64>("/finalasm_position_controller_3/command", 1, true);
  ros::Publisher pub_4 = n.advertise<std_msgs::Float64>("/finalasm_position_controller_4/command", 1, true);
  ros::Publisher pub_5 = n.advertise<std_msgs::Float64>("/finalasm_position_controller_5/command", 1, true);
  ros::Publisher pub_6 = n.advertise<std_msgs::Float64>("/finalasm_position_controller_6/command", 1, true);
  ros::Publisher pub_7 = n.advertise<std_msgs::Float64>("/finalasm_position_controller_7/command", 1, true);
  ros::Publisher pub_8 = n.advertise<std_msgs::Float64>("/finalasm_position_controller_8/command", 1, true);
  std_msgs::Float64 val_1;
  std_msgs::Float64 val_2;
  std_msgs::Float64 val_3;
  std_msgs::Float64 val_4;
  std_msgs::Float64 val_5;
  std_msgs::Float64 val_6;
  std_msgs::Float64 val_7;
  std_msgs::Float64 val_8;

  val_1.data = -0.2;
  val_2.data = -1;
  val_3.data = 0;
  val_4.data = -1;
  val_5.data = 0;
  val_6.data = -1;
  val_7.data = 0;
  val_8.data = 0;


  pub_1.publish(val_1);
  pub_2.publish(val_2);
  pub_3.publish(val_3);
  pub_4.publish(val_4);
  pub_5.publish(val_5);
  pub_6.publish(val_6);
  pub_7.publish(val_7);  
  pub_8.publish(val_8);

  // should implement a function to transform final jointstates to finalpose (maybe a fake kinematic_state object)
  //Eigen::VectorXd finalJoints(8);
  //finalJoints << 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0;
  Eigen::VectorXd finalpose_q(7);
  finalpose_q << 0.7, -0.02, 0.05, -0.5, -0.5, 0.5, -0.5;
  Eigen::VectorXd finalPose(6);
  finalPose << 0.35, -0.05, 0.2, 0, 0, 0;

  //Eigen::VectorXd initialJoints(8);
  Eigen::VectorXd initialJoints(7);
  Eigen::VectorXd initialPose(6);
  Eigen::VectorXd newPose(6);
  Eigen::MatrixXd jacobian;
  Eigen::MatrixXd jacobianXYZ;
  Eigen::MatrixXd jacPseudoInv;
  Eigen::Vector3d reference_point_position(0.0,0.0,0.0);
  
  Eigen::VectorXd newJoints;
  Eigen::VectorXd poseDiff;
  Eigen::VectorXd jointStateVelocity;

  sleep(7);
  int poseInd = 0;
  int returnFlag = false;
  while (true) {
    poseInd++;
    switch (poseInd) {
      case 1:
        finalPose << 0.4, -0.3, 0.1, -0.199565, 1.09444, 1.57999;
        break;
      case 2:
        finalPose << 0.35, -0.2, -0.1, -0.199565, 1.09444, 1.57999;
        break;
      case 3:
        finalPose << 0.45, 0.2, -0.2, -0.199565, 1.09444, 1.57999;
        break;
      case 4:
        finalPose << 0.5, -0.3, 0.2, -0.199565, 1.09444, 1.57999;
        break;
      case 5:
        finalPose << 0.5, 0.1, 0.0, -0.199565, 1.09444, 1.57999;
        break;
      case 6:
        finalPose << 0.48, -0.3, -0.3, -0.199565, 1.09444, 1.57999;
        break;
      case 7:
        finalPose << 0.53, -0.3, 0.2, -0.199565, 1.09444, 1.57999;
        break;
      case 8:
        finalPose << 0.55, -0.0, 0.0, -0.199565, 1.09444, 1.57999;
        break;
      case 9:
        finalPose << 0.35, -0.2, 0.3, -0.199565, 1.09444, 1.57999;
        break;
      case 10:
        finalPose << 0.45, -0.1, 0.3, -0.199565, 1.09444, 1.57999;
        break;
      default:
        returnFlag = true;
    }
    if (returnFlag) break;


    for(std::size_t i = 0; i < 10; ++i){
      //sleep(1);
      kinematic_state->setJointGroupPositions(joint_model_group, current_joint_values);
      /*
      initialJoints << current_joint_values[0], current_joint_values[1], current_joint_values[2], current_joint_values[3]
                      , current_joint_values[4], current_joint_values[5], current_joint_values[6], current_joint_values[7];
                      */

      initialJoints << current_joint_values[0], current_joint_values[1], current_joint_values[2], current_joint_values[3]
                      , current_joint_values[4], current_joint_values[5], current_joint_values[6]; // exculding the last motor
      
      //get current eef_state  
      const Eigen::Affine3d &end_effector_state = kinematic_state->getGlobalLinkTransform("link_8");
      //ROS_INFO_STREAM("Translation: " << end_effector_state.translation());
      initialPose << end_effector_state.translation(), end_effector_state.rotation().eulerAngles(0,1,2);

      // Get the Jacobian
      // ^^^^^^^^^^^^^^^^
      kinematic_state->getJacobian(joint_model_group, kinematic_state->getLinkModel(joint_model_group->getLinkModelNames().back()),
                                 reference_point_position,
                                 jacobian);
      jacobian = jacobian.block(0,0,6,7);
      //std::cout << "The jacobian: "<< jacobian << std::endl;
      //ROS_INFO_STREAM("jacobian: " << jacobian);
      //jacobianXYZ = jacobian.block(0,0,3,8);
      //ROS_INFO_STREAM("jacobian: " << jacobian);
      //ROS_INFO_STREAM("jacobianXYZ: " << jacobianXYZ);
      //ROS_INFO_STREAM("Jacobian: " << std::endl << jacobian);
      //jacPseudoInv = jacobianXYZ.transpose()*((jacobianXYZ*jacobianXYZ.transpose()).inverse());
      //ROS_INFO_STREAM("jacPseudoInv: " << jacPseudoInv);
      //ROS_INFO_STREAM("twist: " << (finalPose-initialPose).block(0,0,3,1));



      //jacobianXYZ = jacobian.block(0,0,3,7); 
      //jacPseudoInv = jacobianXYZ.transpose()*((jacobianXYZ*jacobianXYZ.transpose()).inverse());
      jacPseudoInv = jacobian.transpose()*((jacobian*jacobian.transpose()).inverse());
      //jacPseudoInv = jacPseudoInv.block(0,0,7,3);

      double disSqNorm = (finalPose-initialPose).squaredNorm();

      double scale  = 0.0;
      if(disSqNorm < 0.05)
        scale = 0.7;
      else if(disSqNorm < 0.10)
        scale = 0.6;
      else if(disSqNorm < 0.15)
        scale = 0.5;
      else 
        scale = std::min(0.3, 0.2/disSqNorm);

      //ROS_INFO_STREAM("jac: " << jacPseudoInv*((finalPose-initialPose).block(0,0,3,1)));
      


      double angVelNorm = (jacPseudoInv*(finalPose-initialPose)).norm();
     
      /*
      if((angVelNorm*2) >= 1)
        newJoints = initialJoints + (jacPseudoInv*((finalPose-initialPose)))/(angVelNorm*2);
      else 
        newJoints = initialJoints + (jacPseudoInv*((finalPose-initialPose)));
        */

      poseDiff = (finalPose - initialPose);
      poseDiff.block(3,0,3,1) = Eigen::Vector3d::Zero();
      //ROS_INFO_STREAM(ginv);

      //ROS_INFO_STREAM("poseDiff" << poseDiff.transpose());
      //ROS_INFO_STREAM("recovered" << jacobianXYZ * (jacPseudoInv*poseDiff) );
      if((angVelNorm*2) >= 1)
        newJoints = initialJoints + (jacPseudoInv*poseDiff)/(angVelNorm*2);
      else 
        newJoints = initialJoints + (jacPseudoInv*poseDiff);
      //newJoints = initialJoints + (jacPseudoInv*poseDiff);  
    
      //ROS_INFO_STREAM("update: \n" << (newJoints - initialJoints).transpose());
      //ROS_INFO_STREAM("norm: " << norm);
      //ROS_INFO_STREAM("norm: " << 1/norm);
      //ROS_INFO_STREAM("normalized angular velocity: " << '\n' << (jacPseudoInv*((finalPose-initialPose).block(0,0,3,1)))/(angVelNorm*2));
      //ROS_INFO_STREAM("norm: " << (angVelNorm*2));
      //OS_INFO_STREAM("difference: " << (finalPose-initialPose).block(0,0,3,1).norm());
      //ROS_INFO_STREAM("scale: " << scale);
      //ROS_INFO_STREAM("disnorm: " << disSqNorm);
      //ROS_INFO_STREAM("finalPose: " << finalPose);
      //ROS_INFO_STREAM("initialPose: " << initialPose);
      //ROS_INFO_STREAM("jacPseudoInv: " << jacPseudoInv);


      val_1.data = newJoints[0];
      val_2.data = newJoints[1];
      val_3.data = newJoints[2];
      val_4.data = newJoints[3];
      val_5.data = newJoints[4];
      val_6.data = newJoints[5];
      val_7.data = newJoints[6];
      //val_8.data = newJoints[7];

      pub_1.publish(val_1);
      pub_2.publish(val_2);
      pub_3.publish(val_3);
      pub_4.publish(val_4);
      pub_5.publish(val_5);
      pub_6.publish(val_6);
      pub_7.publish(val_7);  
      //pub_8.publish(val_8);

      sleep(1);
      kinematic_state->setJointGroupPositions(joint_model_group, current_joint_values);
      const Eigen::Affine3d &end_effector_state1 = kinematic_state->getGlobalLinkTransform("link_8");
      newPose << end_effector_state1.translation(), end_effector_state1.rotation().eulerAngles(0,1,2);
      //ROS_INFO_STREAM("angle sq error: " << (end_effector_state1.rotation().eulerAngles(0,1,2) - finalPose.block(3,0,3,1)).norm());
      
      //while ((end_effector_state1.rotation().eulerAngles(0,1,2) - finalPose.block(3,0,3,1)).norm() > 0.25) {
        //ROS_INFO_STREAM("orientation" << end_effector_state1.rotation().eulerAngles(0,1,2));
        //ROS_INFO_STREAM("target orientation" << finalPose.block(3,0,3,1));
        poseDiff = Eigen::VectorXd::Zero(6,1);
        poseDiff.block(3,0,3,1) = (finalPose - newPose).block(3,0,3,1);
        angVelNorm = (jacPseudoInv*(finalPose-newPose)).norm();
        if((angVelNorm*2) >= 1) {
          newJoints = newJoints + (jacPseudoInv*poseDiff)/(angVelNorm*2) * 0.7;
        }
        else {
          newJoints = newJoints + (jacPseudoInv*poseDiff) * 0.7;
        }
        val_1.data = newJoints[0];
        val_2.data = newJoints[1];
        val_3.data = newJoints[2];
        val_4.data = newJoints[3];
        val_5.data = newJoints[4];
        val_6.data = newJoints[5];
        val_7.data = newJoints[6];
        //val_8.data = newJoints[7];

        pub_1.publish(val_1);
        pub_2.publish(val_2);
        pub_3.publish(val_3);
        pub_4.publish(val_4);
        pub_5.publish(val_5);
        pub_6.publish(val_6);
        pub_7.publish(val_7); 
        sleep(1);
        kinematic_state->setJointGroupPositions(joint_model_group, current_joint_values);
        const Eigen::Affine3d &end_effector_state2 = kinematic_state->getGlobalLinkTransform("link_8");
        newPose << end_effector_state2.translation(), end_effector_state2.rotation().eulerAngles(0,1,2);
      //}
      //ROS_INFO_STREAM("dot product: " << (newPose-initialPose).normalized().dot((finalPose-initialPose).normalized()));
     
      //ROS_INFO_STREAM("orientation" << end_effector_state1.rotation().eulerAngles(0,1,2));
      std::cout<<"loop "<< i << " done .."<<std::endl;
      ROS_INFO_STREAM("orientation" << end_effector_state1.rotation().eulerAngles(0,1,2));
    }
    sleep(3);
  }
  
  std::cout<<"all done .."<<std::endl;
  ros::spin();
  //ros::shutdown();
  return 0;
}
