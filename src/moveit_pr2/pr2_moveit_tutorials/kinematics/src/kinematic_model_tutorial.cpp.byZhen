/*********************************************************************
 * Software License Agreement (BSD License)
 *
 *  Copyright (c) 2012, Willow Garage, Inc.
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions and the following
 *     disclaimer in the documentation and/or other materials provided
 *     with the distribution.
 *   * Neither the name of Willow Garage nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 *  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 *********************************************************************/

/* Author: Sachin Chitta */
/* Modified by: Fu-Jen Chu, Yushan Cai and Zhen Liu*/

#include <ros/ros.h>
#include <moveit/robot_model_loader/robot_model_loader.h>
#include <moveit/robot_model/robot_model.h>
#include <moveit/robot_state/robot_state.h>
#include <sensor_msgs/JointState.h>
#include <std_msgs/Float64.h>
#include <unistd.h>
#include <math.h>

//current_joint_values stores the current joint values subscribed from joint_states topic
std::vector<double> current_joint_values;
void joint_state_handler(const sensor_msgs::JointState::ConstPtr& msg)
{
	current_joint_values.clear();
	for(std::size_t i = 0; i < msg->position.size(); ++i) {
		current_joint_values.push_back(msg->position[i]);
	}
}

int main(int argc, char **argv)
{
	//arm initialization
	for (std::size_t i = 0; i < 7; ++i)
	{
		current_joint_values.push_back(0);
	}
	ros::init(argc, argv, "arm_kinematics");
	ros::AsyncSpinner spinner(1);
	spinner.start();
	// Start
	robot_model_loader::RobotModelLoader robot_model_loader("robot_description");
	robot_model::RobotModelPtr kinematic_model = robot_model_loader.getModel();
	ROS_INFO("Model frame: %s", kinematic_model->getModelFrame().c_str());

	robot_state::RobotStatePtr kinematic_state(new robot_state::RobotState(kinematic_model));
	kinematic_state->setToDefaultValues();
	const robot_state::JointModelGroup* joint_model_group = kinematic_model->getJointModelGroup("arm");
	const std::vector<std::string> &joint_names = joint_model_group->getJointModelNames();

	// Subscribe Joint_State_Values
	// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	ros::NodeHandle n;
	ros::Subscriber sub = n.subscribe<sensor_msgs::JointState>("/joint_states", 1, joint_state_handler);

	// Joint Limits
	// ^^^^^^^^^^^^
	// setJointGroupPositions() does not enforce joint limits by itself, but a call to enforceBounds() will do it.
	/* Set one joint in the right arm outside its joint limit */
	kinematic_state->setJointGroupPositions(joint_model_group, current_joint_values);

	/* Check whether any joint is outside its joint limits */
	ROS_INFO_STREAM("Current state is " << (kinematic_state->satisfiesBounds() ? "valid" : "not valid"));

	/* Enforce the joint limits for this state and check again*/
	kinematic_state->enforceBounds();
	ROS_INFO_STREAM("Current state is " << (kinematic_state->satisfiesBounds() ? "valid" : "not valid"));

	//Publish Joint State Values
	//^^^^^^^^^^^^^^^^^^^^^^^^^^
	ros::Publisher pub_1 = n.advertise<std_msgs::Float64>("/finalasm_position_controller_1/command", 1, true);
	ros::Publisher pub_2 = n.advertise<std_msgs::Float64>("/finalasm_position_controller_2/command", 1, true);
	ros::Publisher pub_3 = n.advertise<std_msgs::Float64>("/finalasm_position_controller_3/command", 1, true);
	ros::Publisher pub_4 = n.advertise<std_msgs::Float64>("/finalasm_position_controller_4/command", 1, true);
	ros::Publisher pub_5 = n.advertise<std_msgs::Float64>("/finalasm_position_controller_5/command", 1, true);
	ros::Publisher pub_6 = n.advertise<std_msgs::Float64>("/finalasm_position_controller_6/command", 1, true);
	ros::Publisher pub_7 = n.advertise<std_msgs::Float64>("/finalasm_position_controller_7/command", 1, true);
	ros::Publisher pub_8 = n.advertise<std_msgs::Float64>("/finalasm_position_controller_8/command", 1, true);
	std_msgs::Float64 val_1;
	std_msgs::Float64 val_2;
	std_msgs::Float64 val_3;
	std_msgs::Float64 val_4;
	std_msgs::Float64 val_5;
	std_msgs::Float64 val_6;
	std_msgs::Float64 val_7;
	std_msgs::Float64 val_8;

	//initial joint values
	val_1.data = -0.35;
	val_2.data = -1;
	val_3.data = 0;
	val_4.data = -1;
	val_5.data = 0;
	val_6.data = 0.35;
	val_7.data = 0;
	val_8.data = -0.2;

	pub_1.publish(val_1);
	pub_2.publish(val_2);
	pub_3.publish(val_3);
	pub_4.publish(val_4);
	pub_5.publish(val_5);
	pub_6.publish(val_6);
	pub_7.publish(val_7);  
	pub_8.publish(val_8);

	//define and initialize objects
	Eigen::VectorXd initialJoints(7);
	Eigen::VectorXd initialPose(6);
	Eigen::Matrix4d initialPoseG;
	
	Eigen::VectorXd finalPose(6);
	Eigen::MatrixXd finalPoseG = Eigen::MatrixXd::Identity(4,4);
	
	Eigen::MatrixXd jacobian = Eigen::MatrixXd::Zero(6,7);
	Eigen::MatrixXd jacPseudoInv;
	Eigen::MatrixXd jacobianNEW = Eigen::MatrixXd::Zero(5,7);

	Eigen::Vector3d w(0.0,0.0,0.0);
	Eigen::Vector3d v(0.0,0.0,0.0);
	Eigen::VectorXd twist(6);
	Eigen::VectorXd twistNEW = Eigen::VectorXd::Zero(5);

	Eigen::VectorXd newPose(6);
	Eigen::VectorXd newJoints;
	Eigen::Matrix4d relativePoseG;
	Eigen::Matrix3d relativeR;
	Eigen::Vector3d relativeP(0.0,0.0,0.0);

	Eigen::Vector3d reference_point_position(0.0,0.0,0.0);
	Eigen::Matrix3d eyes = Eigen::MatrixXd::Identity(3,3);
	Eigen::Matrix3d W_head;

	Eigen::VectorXd diff(6);  
	double tau = 0.0;
	double traceR = 0.0;
	int poseInd = 0;
	bool returnFlag = false;

	sleep(7);
	kinematic_state->setJointGroupPositions(joint_model_group, current_joint_values);
	const Eigen::Affine3d &temp = kinematic_state->getGlobalLinkTransform("link_8");
	Eigen::Matrix3d initialRot = temp.rotation();
	Eigen::Vector3d initialEuler;
	initialEuler << temp.rotation().eulerAngles(0,1,2);
	ROS_INFO_STREAM("initial position: \n" << temp.translation());
	ROS_INFO_STREAM("initial eulerAngles: \n" << initialEuler << "\n");
	Eigen::MatrixXd W = Eigen::MatrixXd::Identity(7,7);
	Eigen::MatrixXd I = Eigen::MatrixXd::Identity(5,5);

	W(0,0) = 1;
	W(1,1) = 1;
	W(2,2) = 1;
	W(3,3) = 1;
	W(4,4) = 1;
	W(5,5) = 1;
	W(6,6) = 0.25;

	while (true) {
		poseInd++;
		switch (poseInd) {
			case 1:
				finalPose << 0.45, 0.15, 0.1, -0.199565, 1.09444, 1.57999;  //above cup position
				break;
			case 2:
				finalPose << 0.45, 0.15, 0.04, -0.199565, 1.09444, 1.57999;  //reach cup
				break;
			case 3:
				finalPose << 0.5, 0, 0.12, -0.199565, 1.09444, 1.57999;  //intermediate position
				break;
			case 4:
				finalPose << 0.45, -0.15, 0.12, -0.199565, 1.09444, 1.57999; //final position
				break;
			default:
				returnFlag = true;
			}
		if (returnFlag) break;

		ROS_INFO_STREAM("target #" << poseInd << " translation: \n" << temp.translation().transpose() << "\n");
		double difference = 1000.0;
		double zDifference = 1000.0;
		double angDiff = 1000.0;
		double l1Norm = 1000.0;
		// fix orientation
		finalPoseG.block(0,0,3,3) = initialRot;
		finalPoseG.block(0,3,3,1) = finalPose.block(0,0,3,1);
		for(std::size_t i = 0; i < 30; ++i){
			//set ending condition
			if(l1Norm < 0.03) {
				break;
			}
			sleep(1);
			//get current joint values
			kinematic_state->setJointGroupPositions(joint_model_group, current_joint_values);
			initialJoints << current_joint_values[0], current_joint_values[1], current_joint_values[2], current_joint_values[3], current_joint_values[4], current_joint_values[5], current_joint_values[6];
			//get current eef_state  
			const Eigen::Affine3d &end_effector_state = kinematic_state->getGlobalLinkTransform("link_8");
			initialPose << end_effector_state.translation(), end_effector_state.rotation().eulerAngles(0,1,2);
			initialPoseG = end_effector_state.matrix();

			// get relativePoseG as spatial frame
			relativePoseG = finalPoseG*initialPoseG.inverse();
			relativeR = relativePoseG.block(0,0,3,3);
			relativeP = relativePoseG.block(0,3,3,1);
			traceR = relativeR(0,0) + relativeR(1,1) + relativeR(2,2);

			// calculate v, w depending on tau
			tau = acos(0.5*(traceR - 1));
			if (tau<0.1)
			{
				w << 0.0,0.0,0.0;
				v << relativeP;
			}
			else
			{
				W_head = (relativeR - relativeR.transpose())/(2*sin(tau));
				w << W_head(2,1), W_head(0,2), W_head(1,0);
				v = ((eyes - relativeR)*W_head + w*w.transpose()*tau).inverse()*relativeP;
			}

			// get twist
			twist << v, w;
			twist.block(0,0,3,1) = finalPose.block(0,0,3,1) - initialPose.block(0,0,3,1);

			// Get the Jacobian
			kinematic_state->getJacobian(joint_model_group, kinematic_state->getLinkModel(joint_model_group->getLinkModelNames().back()),
			                           reference_point_position,
			                           jacobian);
			/* Alternate method
			Eigen::VectorXd axis = Eigen::VectorXd::Zero(6,1);
			Eigen::VectorXd thisPose = Eigen::VectorXd::Zero(6,1);
			Eigen::Matrix3d rrr;
			for (int j = 0; j < 7; j++) {
				const Eigen::Affine3d &temp1 = kinematic_state->getGlobalLinkTransform("link_2");
				const Eigen::Affine3d &temp2 = kinematic_state->getGlobalLinkTransform("link_3");
				const Eigen::Affine3d &temp3 = kinematic_state->getGlobalLinkTransform("link_4");
				const Eigen::Affine3d &temp4 = kinematic_state->getGlobalLinkTransform("link_5");
				const Eigen::Affine3d &temp5 = kinematic_state->getGlobalLinkTransform("link_6");
				const Eigen::Affine3d &temp6 = kinematic_state->getGlobalLinkTransform("link_7");
				const Eigen::Affine3d &temp7 = kinematic_state->getGlobalLinkTransform("link_8");
				switch (j) {
					case 0:
						axis << 0,0,0,1,0,0;
						thisPose << temp1.translation(), temp1.rotation().eulerAngles(0,1,2);

						rrr = temp1.rotation();
						break;
					case 1:
						axis << 0,0,0,0,1,0;
						thisPose << temp2.translation(), temp2.rotation().eulerAngles(0,1,2);
						rrr = temp2.rotation();
						break;
					case 2:
						axis << 0,0,0,0,0,1;
						thisPose << temp3.translation(), temp3.rotation().eulerAngles(0,1,2);
						rrr = temp3.rotation();
						break;
					case 3:
						axis << 0,0,0,0,1,0;
						thisPose << temp4.translation(), temp4.rotation().eulerAngles(0,1,2);
						rrr = temp4.rotation();
						break;
					case 4:
						axis << 0,0,0,0,0,1;
						thisPose << temp5.translation(), temp5.rotation().eulerAngles(0,1,2);
						rrr = temp5.rotation();
						break;
					case 5:
						axis << 0,0,0,0,1,0;
						thisPose << temp6.translation(), temp6.rotation().eulerAngles(0,1,2);
						rrr = temp6.rotation();
						break;
					case 6:
						axis << 0,0,0,1,0,0;
						thisPose << temp7.translation(), temp7.rotation().eulerAngles(0,1,2);
						rrr = temp7.rotation();
						break;
					default:
						break;
				}
				Eigen::MatrixXd ad = Eigen::MatrixXd::Zero(6,6);
				Eigen::Matrix3d p_hat = Eigen::Matrix3d::Zero();
				p_hat(2,1) = thisPose(0);
				p_hat(1,2) = -thisPose(0);
				p_hat(0,2) = thisPose(1);
				p_hat(2,0) = -thisPose(1);
				p_hat(1,0) = thisPose(2);
				p_hat(0,1) = -thisPose(2);
				ad.block(0,0,3,3) = rrr;
				ad.block(3,3,3,3) = rrr;
				ad.block(0,3,3,3) = p_hat * rrr;
				jacobian.block(0,j,6,1) = ad * axis;
			}
			*/

			// Get inverse Jacobian
			jacobian = jacobian.block(0,0,6,7);
			jacobianNEW.block(0,0,5,7) = jacobian.block(0,0,5,7);
			jacPseudoInv = (W.inverse())*jacobianNEW.transpose()*((jacobianNEW*(W.inverse())*jacobianNEW.transpose() + 0.01*I).inverse());

			//update twist
			twistNEW.block(0,0,5,1) = twist.block(0,0,5,1);
			ROS_INFO_STREAM("twist norm: " << twist.norm());

			// calculate delta theta norm to avoid large change
			double angVelNorm = (jacPseudoInv*twistNEW).norm();
			ROS_INFO_STREAM("twist: " << twist.transpose());

			//calculate new joints
			double gain = 1;
			if (twist.norm() < 0.1)
			{
				gain = 0.8;
			}
			if (angVelNorm >= 0.5)
			{
				newJoints = initialJoints + gain*(jacPseudoInv*twistNEW)/(angVelNorm*2)*0.6;
			}
			else
			{ 
				newJoints = initialJoints + gain*(jacPseudoInv*twistNEW)*0.6;
			}

			//update joint values
			val_1.data = newJoints[0];
			val_2.data = newJoints[1];
			val_3.data = newJoints[2];
			val_4.data = newJoints[3];
			val_5.data = newJoints[4];
			val_6.data = newJoints[5];
			val_7.data = newJoints[6];

			pub_1.publish(val_1);
			pub_2.publish(val_2);
			pub_3.publish(val_3);
			pub_4.publish(val_4);
			pub_5.publish(val_5);
			pub_6.publish(val_6);
			pub_7.publish(val_7);  
			sleep(1);

			//get current eef
			kinematic_state->setJointGroupPositions(joint_model_group, current_joint_values);
			const Eigen::Affine3d &end_effector_state1 = kinematic_state->getGlobalLinkTransform("link_8");
			newPose << end_effector_state1.translation(), end_effector_state1.rotation().eulerAngles(0,1,2);
			//compute diffs and norms
			diff = (finalPose - newPose).block(0,0,3,1);
			ROS_INFO_STREAM("diff: " << diff.transpose());
			if (diff(0)<0) diff(0) *= -1;
			if (diff(1)<0) diff(1) *= -1;
			if (diff(2)<0) diff(2) *= -1;
			ROS_INFO_STREAM("finalPose: " << finalPose.transpose());
			ROS_INFO_STREAM("newPose: " << newPose.transpose());
			l1Norm = std::max(diff(1),diff(0));
			l1Norm = std::max(l1Norm, diff(2));
			angDiff = (newPose.block(3,0,3,1) - initialEuler).norm();
			ROS_INFO_STREAM("ang diff: " << angDiff);
			zDifference = finalPose(2)-newPose(2);
			if (zDifference < 0) zDifference *= -1;
			ROS_INFO_STREAM("zDiff: " << zDifference);
			ROS_INFO_STREAM("zNew: " << newPose(2));
			ROS_INFO_STREAM("position l1_Norm: " << l1Norm);
			ROS_INFO_STREAM("Pose " << poseInd <<" loop "<< i << " done .." << '\n');
		}
		sleep(3);
		//grab when reach cup position
		if (poseInd == 2)
		{
			val_8.data = 0.4;
			pub_8.publish(val_8);
		}
		//release when reach final position
		if (poseInd == 4)
		{
			val_8.data = 0;
			pub_8.publish(val_8);
		}
		sleep(2);
	}
	ros::spin();
	return 0;
}